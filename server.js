const express = require("express");
const path = require("path");
const fs = require("fs");
const cors = require("cors");

const app = express();
const PORT = 3000;
const COMMENTS_FILE = "comments.js";

app.use(express.json()); // –ü–∞—Ä—Å–∏–º–æ JSON
app.use(cors()); // –î–æ–∑–≤–æ–ª—è—î–º–æ –∫—Ä–æ—Å-–¥–æ–º–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç–∏

// –í—ñ–¥–¥–∞—î–º–æ –≤—Å—ñ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ (CSS, JS, IMG) –ø—Ä—è–º–æ –∑ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –ø–∞–ø–∫–∏
app.use(express.static(__dirname));

// –í—ñ–¥–¥–∞–≤–∞—Ç–∏ index.html –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ http://localhost:3000/
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "index.html"));
});

// –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ partial-—Ñ–∞–π–ª–∏ (–¥–ª—è HTMX)
app.get("/:partial", (req, res) => {
  const partialPath = path.join(__dirname, req.params.partial + ".html");

  if (fs.existsSync(partialPath)) {
    res.sendFile(partialPath);
  } else {
    res.status(404).send("Partial not found");
  }
});

// –Ø–∫—â–æ —Ñ–∞–π–ª—É –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –Ω–µ–º–∞—î ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
if (!fs.existsSync(COMMENTS_FILE)) {
  fs.writeFileSync(COMMENTS_FILE, "const comments = [];\n", "utf8");
}

app.post("/add-comment", (req, res) => {
    console.log("–ó–∞–ø–∏—Ç –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è:", req.body);
  
    fs.readFile(COMMENTS_FILE, "utf8", (err, data) => {
      if (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É:", err);
        return res.status(500).json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É" });
      }
  
      let commentsArray = [];
      try {
        // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
        const jsonData = data.replace(/const comments =|\s*;/g, "").trim();
        commentsArray = JSON.parse(jsonData || "[]");
      } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON! –û—á–∏—â—É—î–º–æ —Ñ–∞–π–ª...");
        fs.writeFileSync(COMMENTS_FILE, "const comments = [];\n", "utf8");
        return res.status(500).json({ success: false, message: "–§–∞–π–ª –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –±—É–ª–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ. –í—ñ–Ω –æ—á–∏—â–µ–Ω–∏–π, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!" });
      }
  
      commentsArray.push(req.body);
  
      const updatedContent = `const comments = ${JSON.stringify(commentsArray, null, 2)};`;
  
      fs.writeFile(COMMENTS_FILE, updatedContent, "utf8", (err) => {
        if (err) {
          console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª:", err);
          return res.status(500).json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª" });
        }
        console.log("‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");
        res.json({ success: true, message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ!" });
      });
    });
  });
  
  // RESERVATION
  const RESERVATIONS_FILE = "reservation.json"; // –§–∞–π–ª –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ JSON —Ñ–æ—Ä–º–∞—Ç

  // –Ø–∫—â–æ —Ñ–∞–π–ª—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ–º–∞—î ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
  if (!fs.existsSync(RESERVATIONS_FILE)) {
    fs.writeFileSync(RESERVATIONS_FILE, "[]", "utf8");
  }
  


  
  // Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É JSON
  app.use(express.json());
  app.use(express.static(path.join(__dirname, '/')));
  app.use(cors());

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å
app.get("/get-reservations", (req, res) => {
  fs.readFile(RESERVATIONS_FILE, "utf8", (err, data) => {
      if (err) {
          console.error("–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É:", err);
          return res.status(500).json({ success: false, message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è" });
      }
      try {
          const reservations = JSON.parse(data);
          res.json({ success: true, reservations });
      } catch (parseError) {
          console.error("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON:", parseError);
          res.status(500).json({ success: false, message: "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON —É —Ñ–∞–π–ª—ñ" });
      }
  });
});


// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
function isConflict(newStartTime, newEndTime, existingStartTime, existingEndTime) {
  return (newStartTime < existingEndTime && newEndTime > existingStartTime);
}

  // –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
  app.post("/book-computer", (req, res) => {
    const { selectedComputers, userName, userPhone, startTime, endTime } = req.body;

    console.log("–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:", req.body);  // ‚úÖ –î–û–î–ê–ù–û –õ–û–ì–£–í–ê–ù–ù–Ø
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ –≤–∂–µ —Ü—ñ –∫–æ–º–ø'—é—Ç–µ—Ä–∏ –Ω–∞ —Ü–µ–π —á–∞—Å
    fs.readFile(RESERVATIONS_FILE, "utf8", (err, data) => {
      if (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –±—Ä–æ–Ω—é–≤–∞–Ω—å:", err);
        return res.status(500).json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É" });
      }
  
      let reservations = JSON.parse(data || "[]");

  
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è–º–∏
      for (const reservation of reservations) {
        if (selectedComputers.includes(reservation.computerId) &&
            isConflict(startTime, endTime, reservation.startTime, reservation.endTime)) {
          return res.status(400).json({ success: false, message: `–ö–æ–º–ø'—é—Ç–µ—Ä ${reservation.computerId} –∑–∞–π–Ω—è—Ç–∏–π —É –≤–∏–±—Ä–∞–Ω–∏–π —á–∞—Å.` });
        }
      }
  
    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    const newReservations = selectedComputers.map(computerId => ({
      computerId,
      userName,
      userPhone,
      startTime,  // ‚úÖ –ì–û–î–ò–ù–ê –ü–û–ß–ê–¢–ö–£
      endTime     // ‚úÖ –ì–û–î–ò–ù–ê –ö–Ü–ù–¶–Ø
    }));

    console.log("–ù–æ–≤—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", newReservations); // ‚úÖ –õ–û–ì–£–Ñ–ú–û –©–û –ó–ê–ü–ò–°–£–Ñ–ú–û

    reservations.push(...newReservations);
  
    fs.writeFile(RESERVATIONS_FILE, JSON.stringify(reservations, null, 2), "utf8", (err) => {
      if (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª –±—Ä–æ–Ω—é–≤–∞–Ω—å:", err);
        return res.status(500).json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª –±—Ä–æ–Ω—é–≤–∞–Ω—å" });
      }
      res.json({ success: true, message: "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!" });
    });
  });
});
  


  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ: http://localhost:${PORT}`);
  });